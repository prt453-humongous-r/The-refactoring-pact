public class Sprint4 {

    public static void main(String[] args) {
        //before
        A[] array = {new AwithX(), new AwithXY(), new AwithXYZ()};
        for (A a : array) {
            a.doIt();
            System.out.print("  ");
        }
        //after
                I[] arrayafter = {new X(new A()), new Y(new X(new A())),
                new Z(new Y(new X(new A())))};
        for (I anArray : arrayafter) {
            anArray.doIt();
            System.out.print("  ");
        }

    }
}
    

public class X extends Decorator{
    
    public X(I sample) {
        super(sample);
    }
    
    @Override
    public void doIt(){
       super.doIt();
       doX();
    }
    
      private void doX() {
        System.out.print('X');
    }
}

public class Y extends Decorator {
    public Y (I sample) {
        super(sample);
    }
    

    @Override
     public void doIt(){
       super.doIt();
       doY();
    }
     
    public void doY()
    {
        System.out.print('Y');
    }
   
}

public class Z extends Decorator{
    
    public Z(I sample) {
        super(sample);
    }
    
    @Override
    public void doIt(){
       super.doIt();
       doZ();
    }
    
      private void doZ() {
        System.out.print('Z');
    }
} 
    
public abstract class Decorator implements I {
   
  private I decoratorSample;
    
public Decorator(I sample) {
      this.decoratorSample = sample;
}

  @Override
  public void doIt(){
    this.decoratorSample.doIt();
}

}

public interface I {
  
    void doIt(); 
}

